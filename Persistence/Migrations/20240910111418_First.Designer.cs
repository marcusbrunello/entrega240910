// <auto-generated />
using System;
using MetaBank.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MetaBank.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240910111418_First")]
    partial class First
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MetaBank.Model.Entities.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CardId")
                        .HasColumnType("int");

                    b.Property<long>("CashAvailable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Number")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("CreatedAt")
                        .IsDescending();

                    b.HasIndex("UpdatedAt")
                        .IsDescending();

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            CardId = -1,
                            CashAvailable = 10000000L,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 9, 10, 11, 14, 17, 965, DateTimeKind.Unspecified).AddTicks(8043), new TimeSpan(0, 0, 0, 0, 0)),
                            Number = "1234567890",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 9, 10, 11, 14, 17, 965, DateTimeKind.Unspecified).AddTicks(8046), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = -2,
                            CardId = -2,
                            CashAvailable = 555555555L,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 9, 10, 11, 14, 17, 965, DateTimeKind.Unspecified).AddTicks(8053), new TimeSpan(0, 0, 0, 0, 0)),
                            Number = "0987654321",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 9, 10, 11, 14, 17, 965, DateTimeKind.Unspecified).AddTicks(8055), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = -3,
                            CardId = -3,
                            CashAvailable = 1111111111L,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 9, 10, 11, 14, 17, 965, DateTimeKind.Unspecified).AddTicks(8058), new TimeSpan(0, 0, 0, 0, 0)),
                            Number = "9876543210",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 9, 10, 11, 14, 17, 965, DateTimeKind.Unspecified).AddTicks(8059), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("MetaBank.Model.Entities.Withdrawal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CreatedAt")
                        .IsDescending();

                    b.HasIndex("UpdatedAt")
                        .IsDescending();

                    b.ToTable("Withdrawals");
                });

            modelBuilder.Entity("Model.Entities.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Holder")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("PinToken")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("TriesLeftToBlock")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(4);

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Cards");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 9, 10, 11, 14, 17, 965, DateTimeKind.Unspecified).AddTicks(6645), new TimeSpan(0, 0, 0, 0, 0)),
                            Holder = "Sam Smith",
                            Number = "1234123412341234",
                            PinToken = "$2a$11$rP9n8XBhOGPfeKmi99JO4eU.SzcsgumEmpDwABP57MdTCh7hxWjz2",
                            TriesLeftToBlock = 4,
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 9, 10, 11, 14, 17, 965, DateTimeKind.Unspecified).AddTicks(6669), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = -2,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 9, 10, 11, 14, 17, 965, DateTimeKind.Unspecified).AddTicks(6674), new TimeSpan(0, 0, 0, 0, 0)),
                            Holder = "Joe Doe",
                            Number = "4321432143214321",
                            PinToken = "$2a$11$rP9n8XBhOGPfeKmi99JO4eU.SzcsgumEmpDwABP57MdTCh7hxWjz2",
                            TriesLeftToBlock = 4,
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 9, 10, 11, 14, 17, 965, DateTimeKind.Unspecified).AddTicks(6676), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = -3,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 9, 10, 11, 14, 17, 965, DateTimeKind.Unspecified).AddTicks(6679), new TimeSpan(0, 0, 0, 0, 0)),
                            Holder = "Greta Garbo",
                            Number = "1111222233334444",
                            PinToken = "$2a$11$rP9n8XBhOGPfeKmi99JO4eU.SzcsgumEmpDwABP57MdTCh7hxWjz2",
                            TriesLeftToBlock = 4,
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 9, 10, 11, 14, 17, 965, DateTimeKind.Unspecified).AddTicks(6680), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("MetaBank.Model.Entities.Account", b =>
                {
                    b.HasOne("Model.Entities.Card", "Card")
                        .WithMany()
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");
                });

            modelBuilder.Entity("MetaBank.Model.Entities.Withdrawal", b =>
                {
                    b.HasOne("MetaBank.Model.Entities.Account", "Account")
                        .WithMany("Withdrawals")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("MetaBank.Model.Entities.Account", b =>
                {
                    b.Navigation("Withdrawals");
                });
#pragma warning restore 612, 618
        }
    }
}
